package main 

templ Hello(){
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Om</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <link type="text/css" rel="stylesheet" href="main.css">
    <script src="https://unpkg.com/htmx.org@2.0.2" integrity="sha384-Y7hw+L/jvKeWIRRkqWYfPcvVxHzVzn5REgzbawhxAuQGwX1XWe70vji+VSeHOThJ" crossorigin="anonymous"></script>
  <script src="https://cdn.tailwindcss.com"></script>

</head>
<body>
    
        <div class="" style="position: absolute; z-index: 10;">
            <button 
        hx-get="/download" 
        hx-swap="none"
        onclick="window.location.href='/download';">Download File</button>


<div class="fixed bottom-0 left-0 right-0 h-20 my-7 rounded-lg max-w-lg mx-auto py-5 bg-opacity-25 border-t border-white border-opacity-20 flex justify-center items-center backdrop-blur-lg shadow-md">
    <div class="flex space-x-4">
        <div class="flex flex-col cursor-pointer items-center text-white transition-transform duration-200 hover:scale-150" onclick="toggleHelloWorld('helloWorld1', 'app1')">
            <img src="https://via.placeholder.com/40" alt="App" />
            <span class="text-xs">Application</span>
        </div>
        <div class="flex flex-col cursor-pointer items-center text-white transition-transform duration-200 hover:scale-150" onclick="toggleHelloWorld('helloWorld2', 'app2')">
            <img src="https://via.placeholder.com/40" alt="Home" />
            <span class="text-xs">Home</span>
        </div>
        <div class="flex flex-col cursor-pointer items-center text-white transition-transform duration-200 hover:scale-150" onclick="toggleHelloWorld('helloWorld3', 'app3')">
            <img src="https://via.placeholder.com/40" alt="About" />
            <span class="text-xs">About</span>
        </div>
        <div class="flex flex-col cursor-pointer items-center text-white transition-transform duration-200 hover:scale-150" onclick="toggleHelloWorld('helloWorld4', 'app4')">
            <img src="https://via.placeholder.com/40" alt="contact" />
            <span class="text-xs">Contact</span>
        </div>
        <div class="flex flex-col cursor-pointer items-center text-white transition-transform duration-200 hover:scale-150" onclick="toggleHelloWorld('helloWorld5', 'app5')">
            <img src="https://via.placeholder.com/40" alt="Demo" />
            <span class="text-xs">Demo</span>
        </div>
    </div>
</div>

<div id="helloWorld1" style="height:75%;overflow: auto;" class="hidden fixed bottom-20 left-0 right-0 p-5 h-full mt-7 mb-20 rounded-lg w-[95%] m-7 py-5 bg-opacity-25 border-t border-white border-opacity-20 flex justify-center items-center backdrop-blur-lg shadow-md">
    

    <div class="bg-white p-9 " style="width:90% ;overflow: auto;">
        <form id="contact-form" 
              hx-post="/submit-form" 
              hx-target="#response" 
              hx-swap="innerHTML" 
              class="space-y-4 h-auto"
              style="overflow: auto;">
              
            <div class="mb-4">
                <label for="name" class="block text-sm font-medium text-gray-700">Name:</label>
                <input type="text" id="name" name="name" required 
                class="mt-1 p-2 block w-full border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-300" placeholder="Your Name">
            </div>

            <div class="mb-4">
                <label for="phone" class="block text-sm font-medium text-gray-700">Phone Number:</label>
                <input type="tel" id="phone" name="phone" required 
                class="mt-1 p-2 block w-full border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-300" placeholder="Your Phone Number">
            </div>

            <div class="mb-4">
                <label for="email" class="block text-sm font-medium text-gray-700">Email:</label>
                <input type="email" id="email" name="email" required 
                class="mt-1 p-2 block w-full border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-300" placeholder="Your Email">
            </div>

            <div class="mb-4">
                <label for="course" class="block text-sm font-medium text-gray-700">Graduation Course Name:</label>
                <input type="text" id="course" name="course" required 
                class="mt-1 p-2 block w-full border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-300" placeholder="Your Graduation Course Name">
            </div>

            <div class="mb-4">
                <label for="college" class="block text-sm font-medium text-gray-700">College Name:</label>
                <input type="text" id="college" name="college" required 
                class="mt-1 p-2 block w-full border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-300" placeholder="Your College Name">
            </div>

            <div class="mb-4">
                <label for="school" class="block text-sm font-medium text-gray-700">School Name:</label>
                <input type="text" id="school" name="school" required 
                class="mt-1 p-2 block w-full border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-300" placeholder="Your School Name">
            </div>

            <div class="mb-4">
                <label for="project1" class="block text-sm font-medium text-gray-700">Project 1 Name:</label>
                <input type="text" id="project1" name="project1" required 
                class="mt-1 p-2 block w-full border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-300" placeholder="Name of Project 1">
            </div>

            <div class="mb-4">
                <label for="projectDetails" class="block text-sm font-medium text-gray-700">Project Details:</label>
                <textarea id="projectDetails" name="projectDetails" required 
                class="mt-1 p-2 block w-full border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-300" placeholder="Details about Project 1"></textarea>
            </div>

            <button type="submit" class="mt-4 w-full bg-blue-500 text-white font-semibold p-2 rounded-md hover:bg-blue-600">Submit</button>
        </form>
    </div>
</div>



<div id="helloWorld2" style="height:75%" class="hidden fixed bottom-20 left-0 right-0 h-full mt-7 mb-20 rounded-lg w-{95%} m-7 py-5 bg-opacity-25 border-t border-white border-opacity-20 flex justify-center items-center backdrop-blur-lg shadow-md">
    <span class="text-3xl">Home</span>
    <br>
    <p>This is a resume Builder website </p>
</div>

<div id="helloWorld3" style="height:75%" class="hidden fixed bottom-20 left-0 right-0 h-full mt-7 mb-20 rounded-lg w-{95%} m-7 py-5 bg-opacity-25 border-t border-white border-opacity-20 flex justify-center items-center backdrop-blur-lg shadow-md">
    <span class="text-3xl"> About page </span>
    <br>
    <p> I made this website, checkout my<a href="https://github.com/Omkumar2003">github</a> </p>
</div>

<div id="helloWorld4" class="hidden fixed bottom-20 left-0 right-0 h-full mt-7 mb-20 rounded-lg w-{95%} m-7 py-5 bg-opacity-25 border-t border-white border-opacity-20 flex justify-center items-center backdrop-blur-lg shadow-md">
    <span class="text-3xl">Contact</span>
    <br>
        <p> I made this website, checkout my<a href="https://github.com/Omkumar2003">github</a> </p>

</div>

<div id="helloWorld5" style="height:75%" class="hidden fixed bottom-20 left-0 right-0 h-full mt-7 mb-20 rounded-lg w-{95%} m-7 py-5 bg-opacity-25 border-t border-white border-opacity-20 flex justify-center items-center backdrop-blur-lg shadow-md">
    <span class="text-3xl">Hello World 5</span>
    
</div>

<script>
    function toggleHelloWorld(id, app) {
        // Close all helloWorld divs
        const allHelloWorldDivs = document.querySelectorAll('[id^="helloWorld"]');
        allHelloWorldDivs.forEach(div => {
            if (div.id !== id) {
                div.classList.add('hidden');
            }
        });

        // Toggle the selected helloWorld div
        const helloWorldDiv = document.getElementById(id);
        helloWorldDiv.classList.toggle('hidden');

        // Update the URL based on the app clicked
        // const newUrl = `/${app}`;
        // history.pushState(null, '', newUrl);
    }
</script>

<style>
    .hidden {
        display: none;
    }
</style>


    </div>

<div id="container"></div>
<div id="info">
    <!-- <a href="https://threejs.org" target="_blank" rel="noopener">three.js</a> - webgl ocean -->
</div>
<script type="importmap">
    {
        "imports": {
            "three": "../build/threemodule.js", 
            "three/addons/": "./jsm/"             
        }
    }
</script>

<script type="module">

    import * as THREE from 'three';
    import Stats from 'three/addons/libs/statsmodule.js';
    import { GUI } from 'three/addons/libs/lilguimodule.js';
    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
    import { Water } from 'three/addons/objects/Water.js';
    import { Sky } from 'three/addons/objects/Sky.js';

    let container, stats;
    let camera, scene, renderer;
    let controls, water, sun, mesh;

    init();

    function init() {
        container = document.getElementById('container');

        renderer = new THREE.WebGLRenderer();
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setAnimationLoop(animate);
        renderer.toneMapping = THREE.ACESFilmicToneMapping;
        renderer.toneMappingExposure = 0.5;
        container.appendChild(renderer.domElement);

        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(55, window.innerWidth / window.innerHeight, 1, 20000);
        camera.position.set(30, 30, 100);

        sun = new THREE.Vector3();

        const waterGeometry = new THREE.PlaneGeometry(10000, 10000);
        water = new Water(
            waterGeometry,
            {
                textureWidth: 512,
                textureHeight: 512,
                waterNormals: new THREE.TextureLoader().load('textures/waternormals.jpg', function (texture) {
                    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
                }),
                sunDirection: new THREE.Vector3(),
                sunColor: 0xffffff,
                waterColor: 0x001e0f,
                distortionScale: 3.7,
                fog: scene.fog !== undefined
            }
        );

        water.rotation.x = -Math.PI / 2;
        scene.add(water);

        const sky = new Sky();
        sky.scale.setScalar(10000);
        scene.add(sky);

        const skyUniforms = sky.material.uniforms;
        skyUniforms['turbidity'].value = 10;
        skyUniforms['rayleigh'].value = 2;
        skyUniforms['mieCoefficient'].value = 0.005;
        skyUniforms['mieDirectionalG'].value = 0.8;

        const parameters = {
            elevation: 2,
            azimuth: 180
        };

        const pmremGenerator = new THREE.PMREMGenerator(renderer);
        const sceneEnv = new THREE.Scene();

        let renderTarget;

        function updateSun() {
            const phi = THREE.MathUtils.degToRad(90 - parameters.elevation);
            const theta = THREE.MathUtils.degToRad(parameters.azimuth);
            sun.setFromSphericalCoords(1, phi, theta);
            sky.material.uniforms['sunPosition'].value.copy(sun);
            water.material.uniforms['sunDirection'].value.copy(sun).normalize();

            if (renderTarget !== undefined) renderTarget.dispose();

            sceneEnv.add(sky);
            renderTarget = pmremGenerator.fromScene(sceneEnv);
            scene.add(sky);
            scene.environment = renderTarget.texture;
        }

        updateSun();

        const geometry = new THREE.BoxGeometry(30, 30, 30);
        const material = new THREE.MeshStandardMaterial({ roughness: 0 });
        mesh = new THREE.Mesh(geometry, material);
        scene.add(mesh);

        controls = new OrbitControls(camera, renderer.domElement);
        controls.maxPolarAngle = Math.PI * 0.495;
        controls.target.set(0, 10, 0);
        controls.minDistance = 40.0;
        controls.maxDistance = 200.0;
        controls.update();

        stats = new Stats();
        container.appendChild(stats.dom);

        const gui = new GUI();
        const folderSky = gui.addFolder('Sky');
        folderSky.add(parameters, 'elevation', 0, 90, 0.1).onChange(updateSun);
        folderSky.add(parameters, 'azimuth', -180, 180, 0.1).onChange(updateSun);
        folderSky.open();

        const waterUniforms = water.material.uniforms;
        const folderWater = gui.addFolder('Water');
        folderWater.add(waterUniforms.distortionScale, 'value', 0, 8, 0.1).name('distortionScale');
        folderWater.add(waterUniforms.size, 'value', 0.1, 10, 0.1).name('size');
        folderWater.open();

        window.addEventListener('resize', onWindowResize);
    }

    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
        render();
        stats.update();
    }

    function render() {
        const time = performance.now() * 0.001;
        mesh.position.y = Math.sin(time) * 20 + 5;
        mesh.rotation.x = time * 0.5;
        mesh.rotation.z = time * 0.51;
        water.material.uniforms['time'].value += 1.0 / 60.0;
        renderer.render(scene, camera);
    }

    // Disable scrollbars and set canvas dimensions when everything is loaded
    window.onload = function() {
        document.body.style.overflow = 'hidden'; // Disable scrollbars
		document.body.style.margin = 0 ;
		document.body.style.padding = 0;
	};

</script>
</body>
</html>

}